package gui;

import logik.GameWindow;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Locale;

public class StartScreen {
    private JFrame frame;
    private JPanel startScreenPanel;
    private JButton settingsButton;
    private JButton highscoreButton;
    private JButton playButton;

    public StartScreen() {
        frame = new JFrame("StartScreen");
        frame.setContentPane(this.startScreenPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
        frame.setLocationRelativeTo(null);
        openStartScreen();
    }

    private void openStartScreen() {
        playButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                //create an object of the game

                GameWindow snakeGame = new GameWindow(150, "Classic", false);
                snakeGame.runGame();

                //close this window
                frame.dispose();


            }
        });


        settingsButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                new SettingsGUI();

                //close this window
                frame.dispose();
            }
        });
        highscoreButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                new HighscoreScreen();

                //close this window
                frame.dispose();
            }
        });

    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        startScreenPanel = new JPanel();
        startScreenPanel.setLayout(new GridBagLayout());
        startScreenPanel.setBackground(new Color(-16777216));
        settingsButton = new JButton();
        settingsButton.setText("Settings");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        startScreenPanel.add(settingsButton, gbc);
        highscoreButton = new JButton();
        highscoreButton.setText("Highscores");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        startScreenPanel.add(highscoreButton, gbc);
        final JPanel spacer1 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.VERTICAL;
        startScreenPanel.add(spacer1, gbc);
        playButton = new JButton();
        playButton.setText("Play");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        startScreenPanel.add(playButton, gbc);
        final JLabel label1 = new JLabel();
        //Font label1Font = this.$$$getFont$$$("Impact", -1, 28, label1.getFont());
        //if (label1Font != null) label1.setFont(label1Font);
        label1.setForeground(new Color(-15811807));
        label1.setText("SnakeGame");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        startScreenPanel.add(label1, gbc);
        final JPanel spacer2 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.VERTICAL;
        startScreenPanel.add(spacer2, gbc);
    }

    /*
    /**
     * @noinspection ALL
     /*
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }
    */
    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return startScreenPanel;
    }

}
